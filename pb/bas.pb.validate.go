// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bas.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on BasProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BasProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Code

	// no validation rules for Error

	// no validation rules for Details

	return nil
}

// BasProductsResponseValidationError is the validation error returned by
// BasProductsResponse.Validate if the designated constraints aren't met.
type BasProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasProductsResponseValidationError) ErrorName() string {
	return "BasProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BasProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasProductsResponseValidationError{}

// Validate checks the field values on BasProductsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BasProductsListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageSize

	// no validation rules for PageNumber

	// no validation rules for OrderKey

	// no validation rules for OrderSort

	return nil
}

// BasProductsListRequestValidationError is the validation error returned by
// BasProductsListRequest.Validate if the designated constraints aren't met.
type BasProductsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasProductsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasProductsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasProductsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasProductsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasProductsListRequestValidationError) ErrorName() string {
	return "BasProductsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BasProductsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasProductsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasProductsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasProductsListRequestValidationError{}

// Validate checks the field values on BasProductsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BasProductsListResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Code

	// no validation rules for Error

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BasProductsListResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BasProductsListResponseValidationError is the validation error returned by
// BasProductsListResponse.Validate if the designated constraints aren't met.
type BasProductsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasProductsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasProductsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasProductsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasProductsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasProductsListResponseValidationError) ErrorName() string {
	return "BasProductsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BasProductsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasProductsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasProductsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasProductsListResponseValidationError{}

// Validate checks the field values on BasProductsList with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BasProductsList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BasProductsListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BasProductsListValidationError is the validation error returned by
// BasProductsList.Validate if the designated constraints aren't met.
type BasProductsListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasProductsListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasProductsListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasProductsListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasProductsListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasProductsListValidationError) ErrorName() string { return "BasProductsListValidationError" }

// Error satisfies the builtin error interface
func (e BasProductsListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasProductsList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasProductsListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasProductsListValidationError{}

// Validate checks the field values on BasProductsOneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BasProductsOneRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Code

	// no validation rules for Price

	return nil
}

// BasProductsOneRequestValidationError is the validation error returned by
// BasProductsOneRequest.Validate if the designated constraints aren't met.
type BasProductsOneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasProductsOneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasProductsOneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasProductsOneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasProductsOneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasProductsOneRequestValidationError) ErrorName() string {
	return "BasProductsOneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BasProductsOneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasProductsOneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasProductsOneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasProductsOneRequestValidationError{}

// Validate checks the field values on BasProductsIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BasProductsIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// BasProductsIdRequestValidationError is the validation error returned by
// BasProductsIdRequest.Validate if the designated constraints aren't met.
type BasProductsIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasProductsIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasProductsIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasProductsIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasProductsIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasProductsIdRequestValidationError) ErrorName() string {
	return "BasProductsIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BasProductsIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasProductsIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasProductsIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasProductsIdRequestValidationError{}

// Validate checks the field values on BasProductsDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BasProductsDetailResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Code

	// no validation rules for Error

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BasProductsDetailResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BasProductsDetailResponseValidationError is the validation error returned by
// BasProductsDetailResponse.Validate if the designated constraints aren't met.
type BasProductsDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasProductsDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasProductsDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasProductsDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasProductsDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasProductsDetailResponseValidationError) ErrorName() string {
	return "BasProductsDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BasProductsDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasProductsDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasProductsDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasProductsDetailResponseValidationError{}
