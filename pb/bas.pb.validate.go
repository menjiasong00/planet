// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bas.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on BaslProductsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BaslProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Code

	// no validation rules for Error

	// no validation rules for Details

	return nil
}

// BaslProductsResponseValidationError is the validation error returned by
// BaslProductsResponse.Validate if the designated constraints aren't met.
type BaslProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaslProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaslProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaslProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaslProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaslProductsResponseValidationError) ErrorName() string {
	return "BaslProductsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BaslProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaslProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaslProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaslProductsResponseValidationError{}

// Validate checks the field values on BaslProductsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BaslProductsListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageSize

	// no validation rules for PageNumber

	// no validation rules for OrderKey

	// no validation rules for OrderSort

	return nil
}

// BaslProductsListRequestValidationError is the validation error returned by
// BaslProductsListRequest.Validate if the designated constraints aren't met.
type BaslProductsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaslProductsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaslProductsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaslProductsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaslProductsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaslProductsListRequestValidationError) ErrorName() string {
	return "BaslProductsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BaslProductsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaslProductsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaslProductsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaslProductsListRequestValidationError{}

// Validate checks the field values on BaslProductsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BaslProductsListResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Code

	// no validation rules for Error

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaslProductsListResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BaslProductsListResponseValidationError is the validation error returned by
// BaslProductsListResponse.Validate if the designated constraints aren't met.
type BaslProductsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaslProductsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaslProductsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaslProductsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaslProductsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaslProductsListResponseValidationError) ErrorName() string {
	return "BaslProductsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BaslProductsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaslProductsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaslProductsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaslProductsListResponseValidationError{}

// Validate checks the field values on BaslProductsList with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BaslProductsList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BaslProductsListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BaslProductsListValidationError is the validation error returned by
// BaslProductsList.Validate if the designated constraints aren't met.
type BaslProductsListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaslProductsListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaslProductsListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaslProductsListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaslProductsListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaslProductsListValidationError) ErrorName() string { return "BaslProductsListValidationError" }

// Error satisfies the builtin error interface
func (e BaslProductsListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaslProductsList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaslProductsListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaslProductsListValidationError{}

// Validate checks the field values on BaslProductsOneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BaslProductsOneRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Code

	// no validation rules for Price

	return nil
}

// BaslProductsOneRequestValidationError is the validation error returned by
// BaslProductsOneRequest.Validate if the designated constraints aren't met.
type BaslProductsOneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaslProductsOneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaslProductsOneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaslProductsOneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaslProductsOneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaslProductsOneRequestValidationError) ErrorName() string {
	return "BaslProductsOneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BaslProductsOneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaslProductsOneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaslProductsOneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaslProductsOneRequestValidationError{}

// Validate checks the field values on BaslProductsIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BaslProductsIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// BaslProductsIdRequestValidationError is the validation error returned by
// BaslProductsIdRequest.Validate if the designated constraints aren't met.
type BaslProductsIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaslProductsIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaslProductsIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaslProductsIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaslProductsIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaslProductsIdRequestValidationError) ErrorName() string {
	return "BaslProductsIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BaslProductsIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaslProductsIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaslProductsIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaslProductsIdRequestValidationError{}

// Validate checks the field values on BaslProductsDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BaslProductsDetailResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Code

	// no validation rules for Error

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaslProductsDetailResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BaslProductsDetailResponseValidationError is the validation error returned
// by BaslProductsDetailResponse.Validate if the designated constraints aren't met.
type BaslProductsDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaslProductsDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaslProductsDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaslProductsDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaslProductsDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaslProductsDetailResponseValidationError) ErrorName() string {
	return "BaslProductsDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BaslProductsDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaslProductsDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaslProductsDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaslProductsDetailResponseValidationError{}
