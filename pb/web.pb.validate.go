// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: web.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ProductsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Code

	// no validation rules for Error

	// no validation rules for Details

	return nil
}

// ProductsResponseValidationError is the validation error returned by
// ProductsResponse.Validate if the designated constraints aren't met.
type ProductsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsResponseValidationError) ErrorName() string { return "ProductsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ProductsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsResponseValidationError{}

// Validate checks the field values on ProductsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageSize

	// no validation rules for PageNumber

	// no validation rules for OrderKey

	// no validation rules for OrderSort

	return nil
}

// ProductsListRequestValidationError is the validation error returned by
// ProductsListRequest.Validate if the designated constraints aren't met.
type ProductsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsListRequestValidationError) ErrorName() string {
	return "ProductsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsListRequestValidationError{}

// Validate checks the field values on ProductsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsListResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Code

	// no validation rules for Error

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductsListResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProductsListResponseValidationError is the validation error returned by
// ProductsListResponse.Validate if the designated constraints aren't met.
type ProductsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsListResponseValidationError) ErrorName() string {
	return "ProductsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsListResponseValidationError{}

// Validate checks the field values on ProductsList with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProductsList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductsListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProductsListValidationError is the validation error returned by
// ProductsList.Validate if the designated constraints aren't met.
type ProductsListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsListValidationError) ErrorName() string { return "ProductsListValidationError" }

// Error satisfies the builtin error interface
func (e ProductsListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsListValidationError{}

// Validate checks the field values on ProductsOneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsOneRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	// no validation rules for Code

	// no validation rules for Price

	return nil
}

// ProductsOneRequestValidationError is the validation error returned by
// ProductsOneRequest.Validate if the designated constraints aren't met.
type ProductsOneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsOneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsOneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsOneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsOneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsOneRequestValidationError) ErrorName() string {
	return "ProductsOneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsOneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsOneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsOneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsOneRequestValidationError{}

// Validate checks the field values on ProductsIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProductsIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ProductsIdRequestValidationError is the validation error returned by
// ProductsIdRequest.Validate if the designated constraints aren't met.
type ProductsIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsIdRequestValidationError) ErrorName() string {
	return "ProductsIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsIdRequestValidationError{}

// Validate checks the field values on ProductsDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ProductsDetailResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for Message

	// no validation rules for Code

	// no validation rules for Error

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductsDetailResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ProductsDetailResponseValidationError is the validation error returned by
// ProductsDetailResponse.Validate if the designated constraints aren't met.
type ProductsDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductsDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductsDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductsDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductsDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductsDetailResponseValidationError) ErrorName() string {
	return "ProductsDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProductsDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductsDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductsDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductsDetailResponseValidationError{}
